Recursion

2.
// You are using GCC
#include<iostream>
using namespace std;
int gcd(int n,int m)
{
    if(m==0)
    {
        return n;
    }
    
    return gcd(m,n%m);
    
}
int main()
{
    int n,m;
    cin>>n>>m;
    cout<<"G.C.D of "<<n<<" and "<<m<<" is "<<gcd(n,m);
}

3.
// You are using GCC
#include<iostream>
using namespace std;
int rever(int n)
{
    if(n<10)
    {
        cout<<n;
        return 0;
    }
     cout<<n%10;
     rever(n/10);
    
}
int main()
{
    int n;cin>>n;
  
    rever(n);
}



Searching
1.
// You are using GCC
#include <bits/stdc++.h> 
using namespace std; 
int findelement(vector<int>&el, int n)
{
    for(int i=0;i<el.size();i++)
    {
        if(el[i]==n)
        return i;
    }
    return -1;
}
int main()
{
    int n;cin>>n;
    vector<int>a(n);
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    vector<int>el;
    vector<int>fr;
    for(int i=0;i<n;i++)
    {
        int id=findelement(el,a[i]);
        if(id==-1)
       {
           el.push_back(a[i]);
        fr.push_back(1);
       }
       else
       {
           fr[id]++;
       }
    }
    for(int i=0;i<el.size();i++)
    {
        for(int j=i+1;j<el.size();j++)
        {
            if(fr[i]<fr[j])
            {
                swap(fr[i],fr[j]);
                swap(el[i],el[j]);
            }
            else if(fr[i]==fr[j] && findelement(a,el[i])> findelement(a,el[j]))
            {
                swap(el[i],el[j]);
            }
        }
    }
    for(int i=0;i<el.size();i++)
    {
        for(int j=0;j<fr[i];j++)
        {
            cout<<el[i]<<" ";
        }
    }
   
}

2..
// You are using GCC
#include<iostream>
using namespace std;
int search(int n,string a[],string s)
{
    for(int i=0;i<n;i++)
    {
        if(s==a[i])
        {
            return i;
        }
    }
    return -1;
}
int main()
{
    int n;cin>>n;
    string a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    string s;
    cin>>s;
    int x=search(n,a,s);
    
    if(x!=-1)
    {
        cout<<"Name found at index "<<x;
    }
    else
    cout<<"Name not found in the list.";
}

// You are using GCC
#include<iostream>
#include<algorithm>
#include<iomanip>
#include<vector>
using namespace std;
struct Student{
    int r;
    string n;
    int mr[3];
    int tot;
    float avg;
};
bool comparest(const Student &a,const Student &b)
{
    return a.avg>b.avg;
}
int main()
{
    int n;cin>>n;
      vector<Student>st(n);

    for(int i=0;i<n;i++)
    {
        cin>>st[i].r;
        cin>>st[i].n;
        for(int j=0;j<3;j++)
        {
            cin>>st[i].mr[j];
            st[i].tot+=st[i].mr[j];
        }
       st[i].avg=(float)(st[i].tot)/3;

    }
    sort(st.begin(),st.end(),comparest);
    for(int i=0;i<n;i++)
    { 
       cout<<st[i].r<<"  "<<st[i].n<<"  "<<st[i].tot;
       cout<<fixed<<setprecision(2)<<"  "<<st[i].avg<<endl;
    }
    
    
}
HeapSort
1..
// You are using GCC
#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
    int n;cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    cout<<"Original Array: ";
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    cout<<endl;
    make_heap(a,a+n,greater<int>());
    cout<<"Min Heap:";
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    
}

// You are using GCC
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
int main()
{
    int n;cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    cout<<"Original Array: ";
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    cout<<endl;
    priority_queue<int,vector<int>, greater<>>q;
    for(int i=0;i<n;i++)
    {
        q.push(a[i]);
    }
    cout<<"Sorted Array (Heap Sort): ";
    while(!q.empty())
    {
        cout<<q.top()<<" ";
        q.pop();
    }
}
3..
// You are using GCC
#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
int main()
{
    int n;cin>>n;
    int m;cin>>m;
    int a[n];
    map<int,int>mp;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
        mp[a[i]]++;
    }
    int b[m];
   for(int i=0;i<m;i++)
   {
       cin>>b[i];
       if(mp[b[i]]==0)
       {
           cout<<"Not a subset";
           return 0;
       }
       mp[b[i]]--;
   }
   cout<<"subset";
}

Backracting

1.
// You are using GCC
#include<bits/stdc++.h>
using namespace std;
void printsol(  vector<vector<int>>&sol,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<sol[i][j]<<" ";
        }
            cout<<endl;
    }
}
bool issafe( vector<vector<int>>&m,int x,int y,int n)
{
    return(x>=0&&x<n&&y>=0&&y<n&&m[x][y]==1);
}
bool solvemazeutil(vector<vector<int>>&m,int x,int y,  vector<vector<int>>&sol,int n)
{
    if(x==n-1&&y==n-1&&m[x][y]==1)
    {
        sol[x][y]=1;
        return true;
    }
    if(issafe(m,x,y,n))
    {
        if(sol[x][y]==1)
        return false;
        sol[x][y]=1;
        if(solvemazeutil(m,x,y+1,sol,n))
        return true;
        if(solvemazeutil(m,x+1,y,sol,n))
        return true;
        if(solvemazeutil(m,x,y-1,sol,n))
        return true;
        if(solvemazeutil(m,x-1,y,sol,n))
        return true;
        sol[x][y]=0;
        return false;
    }
    return false;
}
bool solvemaze(int n,vector<vector<int>>&m)
{
    vector<vector<int>>sol(n,vector<int>(n,0));
    if(m[0][0]==0||m[n-1][n-1]==0 )
    {
        cout<<"-1";
    return false;
    }
    if(!solvemazeutil(m,0,0,sol,n))
    {
        cout<<"-1";
        return false;
    }
    printsol(sol,n);
    return true;
}
int main()
{
    int n;cin>>n;
    vector<vector<int>>m(n,vector<int>(n));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>m[i][j];
        }
    }
    solvemaze(n,m);
}

2.
// You are using GCC
#include<iostream>
using namespace std;
int c=0;
void subset(int idx,int a[],int t,int n)
{
    if(t==0)
    {
        c++;
        return;
    }
    if(idx==n)
    {
        return;
    }
        
        if(a[idx]<=t)
        {
            subset(idx+1,a,t-a[idx],n);
        }
    subset(idx+1,a,t,n);
}
int main()
{
   int n;cin>>n;
   int a[n];
   for(int i=0;i<n;i++)
   {
       cin>>a[i];
       
   }
   int t;cin>>t;
   subset(0,a,t,n);
   cout<<c;
}

3..
// You are using GCC
#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
    int n;
    cin>>n;
   int a=0,b=0,c=0,e=0;
   while(n)
   {
       if(n>=5)
       {
           n=n-5;
           a++;
       }
       else if(n>=3)
       {
           n=n-3;
           b++;
       }
       else if(n>=2)
       {
           n=n-2;
           c++;
       }
       else
       {
           n-=1;
           e++;
       }
   }
   cout<<a<<endl<<b<<endl<<c<<endl<<e;
}
Greedy

1..
// You are using GCC
#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
   int n;cin>>n;
   int a[n];
   int sum=0;
   for(int i=0;i<n;i++)
   {
       cin>>a[i];
       
       sum+=a[i];
   }
   sum=sum/2;
   sort(a,a+n);
   int csum=0,ans=0;
   for(int i=n-1;i>=0;i--)
   {
       csum+=a[i];
       ans++;
       if(csum>sum)
       {
           cout<<ans;
           break;
       }
   }
}


2..
// You are using GCC
#include<iostream>
#include<queue>
using namespace std;
struct huffnode
{
    int  data;
    char c;
    huffnode *left;
    huffnode *right;
};
struct Comparator{
    bool operator()(huffnode* l,huffnode* r)
    {
        return(l->data>r->data);
    }
};
void printCode(huffnode *root,string s)
{
    if(!root)
    return;
    if(root->c!='#')
    cout<<root->c<<":"<<s<<endl;
    printCode(root->left,s+"0");
    printCode(root->right,s+"1");
    
}
int main()
{
    int n;
    cin>>n;
    char c[n];
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>c[i];
    }
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    priority_queue<huffnode*, vector<huffnode*>,Comparator>q;
    for(int i=0;i<n;i++)
    {
        huffnode* hn=new huffnode();
        hn->c=c[i];
        hn->data=a[i];
        hn->left=NULL;
        hn->right=NULL;
        q.push(hn);
    }
    huffnode* root=NULL;
    while(q.size()>1)
    {
        huffnode* x=q.top();
        q.pop();
        huffnode* y=q.top();
        q.pop();
        huffnode *f=new huffnode();
        f->data=x->data + y->data;
        f->c='#';
        f->left=x;
        f->right=y;
        root=f;
        q.push(f);
        
    }
    printCode(root,"");
}



String 

1...
// You are using GCC
#include<iostream>
using namespace std;
void getzar(string s,int z[])
{
    int n=s.length();
    int l,r,k;
    l=r=0;
    for(int i=1;i<n;i++)
    {
       if(i>r)
       {
           l=r=i;
           while(r<n&&s[r-l]==s[r])
           {
               r++;
           }
           z[i]=r-l;
           r--;
       }
       else
       {
           k=i-l;
           if(z[k]<r-i+1)
           z[i]=z[k];
           else
           {
               l=i;
           while(r<n&&s[r-l]==s[r])
           {
               r++;
           }
           z[i]=r-l;
           r--;
           }
       }
    }
}
void search(string s,string pat)
{
    string con=pat+"$"+s;
    int l=con.length();
    int z[l];
    getzar(con,z);
    int f=0;
    for(int i=0;i<l;i++)
    {
        if(z[i]==pat.length())
        {
            cout<<"Found at "<<i-pat.length()-1<<endl;
            f++;
        }
    }
    if(f==0)
    {
        cout<<"Not Found";
    }
}
int main()
{
    string s;cin>>s;
    string a;cin>>a;
    search(s,a);
}


2...
// You are using GCC
#include<iostream>
using namespace std;
void computelps(string pat,int m,int lps[])
{
    int len=0;
    int i=1;
    lps[0]=0;
    while(i<m)
    {
        if(pat[i]==pat[len])
        {
            len++;
            lps[i]=len;
            i++;
        }
        else
        {
            if(len!=0)
            {
                len=lps[len-1];
                
            }
            else
            {
                lps[i]=0;
                i++;
            }
        }
    }
}
void kmp(string txt,string pat,int n,int m)
{
    int lps[m];
    int f=0;
    computelps(pat,m,lps);
    int j=0,i=0;
    while(n-i>=m-j)
    {
        if(pat[j]==txt[i])
        {
            j++;i++;
            
        }
        if(j==m)
        {
            cout<<"Found at "<<i-j<<endl;
            j=lps[j-1];
            f=1;
        }
        else if(i<n&&pat[j]!=txt[i])
        {
            if(j!=0)
            {
                j=lps[j-1];
                
            }
            else
            i++;
        }
    }
    if(f==0)
    {
        cout<<" not Found";
    }
}
int main()
{
    string pat,txt;
    cin>>txt>>pat;
    int n=txt.length();
    int m=pat.length();
    kmp(txt,pat,n,m);
}


3..
// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    string s;
    cin>>s;
    string pat;
    cin>>pat;
    int n=s.length();
    int m=pat.length();
    int g=0;
    for(int i=0;i<=n-m;i++)
    {
        int j=0;
        for( j=0;j<m;j++)
        {
            if(s[i+j]!=pat[j])
            {
               break; 
            }
        }
        if(j==m)
        {
            cout<<"Found at "<<i<<endl;
            g=1;
        }
        
        
    }
    if(g==0)
    {
        cout<<"Not Found";
    }
    
    
}


Dynamic programming

1..
// You are using GCC
 #include<bits/stdc++.h>
 using namespace std;
 void Maximumsub(int n,int m,vector<vector<int>>&a)
 {
   vector<vector<int>>b(n,vector<int>(m,0));
     int Maxp=0;
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<m;j++)
         {
            if(i==0||j==0)
            b[i][j]=a[i][j];
            else if(a[i][j]==1)
            {
                b[i][j]=1+min({b[i][j-1],b[i-1][j],b[i-1][j-1]});
            }
            else
            b[i][j]=0;
         
         
         Maxp=max(b[i][j],Maxp);
         }
        
     }
     for(int i=0;i<Maxp;i++)
     {
         for(int j=0;j<Maxp;j++)
         {
             cout<<"1 ";
         }
         cout<<endl;
     }
     
 }
 int main()
 {
     int n;cin>>n;
     int m;cin>>m;
     vector<vector<int>>a(n,vector<int>(n));
     int k;
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<m;j++)
         {
             cin>>k;
             a[i][j]=k;
         }
     }
     Maximumsub(n,m,a);
 }

2..
// You are using GCC
#include<bits/stdc++.h>
using namespace std;
int lps(string s)
{
    int n=s.length();
    vector<vector<int>>dp(n,vector<int>(n,0));
    for(int i=0;i<n;i++)
    {
        dp[i][i]=1;
    }
    for(int l=2;l<=n;l++)
    {
        for(int i=0;i<=n-l;i++){
            int j=i+l-1;
            if(s[i]==s[j])
            {
                dp[i][j]=dp[i+1][j-1]+2;
            }
            else
            dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
        }
    }
    return dp[0][n-1];
}
int main()
{
    string s;cin>>s;
    cout<<lps(s);
}


3..
// You are using GCC
#include<iostream>
using namespace std;
void Longestsubstring(string a)
{
    int n=a.length();
    int lcs[n+1][n+1];
    for(int i=0;i<n+1;i++)
    {
        for(int j=0;j<n+1;j++)
        {
            lcs[i][j]=0;
        }
    }
    string res;
    int len=0;
    int id=0,i;
    for( i=1;i<n+1;i++)
    {
        for(int j=i+1;j<n+1;j++)
        {
            if(a[i-1]==a[j-1]&&(j-i)>lcs[i-1][j-1])
            {
                lcs[i][j]=lcs[i-1][j-1]+1;
            
            if(lcs[i][j]>len)
            {
                len=lcs[i][j];
                id=max(i,id);
            }
            }
            else
            lcs[i][j]=0;
        }
    }
    //cout<<len<<" "<<id<<" "<<endl;
    if(len>0)
    {
        for( i=id-len+1;i<=id;i++)
        {
            res.push_back(a[i-1]);
        }
    }
    cout<<res;
    
}
int main()
{
    string a;
    cin>>a;
    Longestsubstring(a);
}

Graph

Kruskal
// You are using GCC
#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
struct Edge
{
    int src,dest,w;
    
};
bool Comparator(Edge a,Edge b)
{
    return(a.w<b.w); 
}
void unions(int p[],int x,int y)
{
    p[x]=y;
}
int find(int p[],int i)
{
    while(p[i]!=-1)
    {
        i=p[i];
    }
    return i;
}
void kruskal(int v,int e,Edge ed[])
{
    int p[v];
    sort(ed,ed+e,Comparator);
    fill(p,p+v,-1);
    Edge res[v];
    int ec=0;
    for(int i=0;i<e&&ec<v-1;i++)
    {
        int src=ed[i].src;
        int we=ed[i].w;
        int dest=ed[i].dest;
        int ps=find(p,src);
        int pd=find(p,dest);
        if(pd!=ps)
        {
            res[ec].src=src;
            res[ec].dest=dest;
            res[ec].w=we;
            ec++;
            unions(p,ps,pd);
        }
    }
    int mc=0;
    for(int i=0;i<ec;i++)
    {
        cout<<res[i].src<<" -- "<<res[i].dest<<" == "<<res[i].w<<endl;
        mc+=res[i].w;
    }
    cout<<mc;
}
int main()
{
    int v,e;
    cin>>v>>e;
    Edge ed[e];
    for(int i=0;i<e;i++)
    {
        cin>>ed[i].src>>ed[i].dest>>ed[i].w;
        
    }
    kruskal(v,e,ed);
}

Floyad
// You are using GCC
#include<bits/stdc++.h>
using namespace std;
int INF=100;
int v;
void helper(int g[][100])
{
    for(int k=0;k<v;k++)
    {
        for(int i=0;i<v;i++)
        {
            for(int j=0;j<v;j++)
            {
                g[i][j]=min(g[i][j],g[i][k]+g[k][j]);
            }
        }
    }
    cout<<endl;
    cout<<"Shortest path matrix"<<endl;
    for(int i=0;i<v;i++)
    {
        for(int j=0;j<v;j++)
        {
            cout<<g[i][j]<<" ";
        }
        cout<<endl;
    }
}
int main()
{
    cin>>v;
    int e;
    cin>>e;
    int g[100][100];
    for(int i=0;i<v;i++)
    {
        for(int j=0;j<v;j++)
        {
            if(i==j)
            g[i][j]=0;
            else
            g[i][j]=INF;
        }
    }
    int v1,v2,w;
    for(int i=0;i<e;i++)
    {
            cin>>v1>>v2>>w;
            g[v1][v2]=w;
            g[v2][v1]=w;
    }
    cout<<"Original matrix"<<endl;
    for(int i=0;i<v;i++)
    {
        for(int j=0;j<v;j++)
        {
            if(g[i][j]==INF)
            cout<<"INF ";
            else
            cout<<g[i][j]<< " ";
        }
        cout<<endl;
    }
    
    helper(g);
    
}


Range query
1..
// You are using GCC
#include<bits/stdc++.h>
#include<climits>
using namespace std;
void construct(int a[],int l,int h,int i,int st[])
{
    if(l==h)
    {
        st[i]=a[l];
        return;
    }
    int mid=(l+h)/2;
    construct(a,l,mid,2*i+1,st);    
    construct(a,mid+1,h,2*i+2,st);
    st[i]=min(st[2*i+1],st[2*i+2]);
    
}
int Rangeminq(int st[],int node,int start,int end,int ql,int qh)
{
    if(ql>end || qh<start)
    {
        return INT_MAX;
    }
    if(ql<=start && qh>=end)
    return st[node];
    
    int mid=(start+end)/2;
    int lm=Rangeminq(st, 2*node+1 , start,mid,ql,qh);
    int rm=Rangeminq(st,2*node+2 , mid+1,end,ql,qh);
    return min(lm,rm);
}
int main()
{
    int n;cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int h=ceil(log2(n));
    int max_size=2*pow(2,h)-1;
    int st[max_size];
    construct(a,0,n-1,0,st);
    int qs,qe;
    cin>>qs>>qe;
    
    if(qs<n&&qe<n)
    {
    cout<<"Minimum of values in range ["<<qs<<", "<<qe<<"] is = "<<Rangeminq(st,0,0,n-1,qs,qe)<<endl;
    }
    else
    {
    cout<<"Invalid Input"<<endl;
    cout<<"Minimum of values in range ["<<qs<<", "<<qe<<"] is = -1";
    }
    
}

2..

// You are using GCC
#include<bits/stdc++.h>
using namespace std;
void construct(int a[],int l,int h,int st[],int i)
{
    if(l==h)
    {
        st[i]=a[l];
        return;
    }
    int mid=(l+h)/2;
    construct(a,l,mid,st,i*2+1);
    construct(a,mid+1,h,st,2*i+2);
    st[i]=st[2*i+1]+st[2*i+2];
}
 int  Minquery(int st[],int node,int start,int end,int qs,int qe)
 {
     if(qe<start || qs>end)
     return 0;
     if(qs<=start && qe>=end)
     {
         return st[node];
     }
     int mid=(start+end)/2;
     int lm=Minquery(st,2*node+1,start,mid,qs,qe);
     int rm=Minquery(st,2*node+2,mid+1,end,qs,qe);
   return (lm+rm);
     
 }
int main()
{
    int n;cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int h=ceil(log2(n));
    int siz=2*pow(2,h)-1;
    int st[siz];
    construct(a,0,n-1,st,0);
    int qs,qe;
    cin>>qs>>qe;
   cout<< Minquery(st,0,0,n-1,qs,qe);
    
}

3..
ratmaze
// You are using GCC
#include<bits/stdc++.h>
using namespace std;
void printsole(vector<vector<int>>&sol,int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<sol[i][j]<<" ";
        }
        cout<<endl;
    }
}
bool issafe(vector<vector<int>>&m,int x,int y,int n)
{
    return(x>=0&&x<n&&y>=0&&y<n&&m[x][y]==1);
}
bool solvemazeutil(vector<vector<int>>&m,int x,int y,vector<vector<int>>&sol,int n)
{
    if(x==n-1&&y==n-1&&m[x][y]==1)
    {
        sol[x][y]=1;
        return true;
    }
    if(issafe(m,x,y,n))
    {
        if(sol[x][y]==1)
        return false;
        sol[x][y]=1;
        if(solvemazeutil(m,x+1,y,sol,n))
        return true;
        if(solvemazeutil(m,x,y+1,sol,n))return true;
        if(solvemazeutil(m,x-1,y,sol,n))return true;
        if(solvemazeutil(m,x,y-1,sol,n))return true;
        sol[x][y]=0;
        return false;
        
    }
    return false;
}
bool solvemaze(vector<vector<int>>&m,int n)
{
    vector<vector<int>>sol(n,vector<int>(n,0));
    if(m[0][0]==0||m[n-1][n-1]==0)
    {
        cout<<"-1";
        return false;
    }
    if(!solvemazeutil(m,0,0,sol,n))
    {
        cout<<"-1";
        return false;
    }
    printsole(sol,n);
    return true;
}
int main()
{
    int n;
    cin>>n;
    vector<vector<int>>m(n,vector<int>(n));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>m[i][j];
        }
    }
    solvemaze(m,n);
}
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max(); // Define infinity

// Function to perform Dijkstra's algorithm
void dijkstra(int V, const vector<vector<pair<int, int>>>& graph, int src) {
    vector<int> dist(V, INF); // Distance from source to each vertex
    dist[src] = 0; // Distance to the source is 0

    // Min-heap priority queue to store (distance, vertex) pairs
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, src}); // Start with the source vertex

    while (!pq.empty()) {
        int u = pq.top().second; // Get the vertex with the smallest distance
        pq.pop();

        // Explore neighbors of u
        for (const auto& neighbor : graph[u]) {
            int v = neighbor.first;      // Neighbor vertex
            int weight = neighbor.second; // Edge weight

            // Relaxation step
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight; // Update distance
                pq.push({dist[v], v});      // Push updated distance into the priority queue
            }
        }
    }

    // Output the shortest distances from the source vertex
    for (int i = 0; i < V; ++i) {
        cout << "Vertex " << i << ": " << (dist[i] == INF ? "INF" : to_string(dist[i])) << endl;
    }
}

int main() {
    int V, E;
    cin >> V >> E; // Number of vertices and edges

    vector<vector<pair<int, int>>> graph(V); // Adjacency list representation of the graph

    for (int i = 0; i < E; ++i) {
        int u, v, weight;
        cin >> u >> v >> weight; // Edge definition: u v weight
        graph[u].emplace_back(v, weight); // Add edge to graph
        // Uncomment below line if you want a directed graph:
        // graph[v].emplace_back(u, weight); // Add edge in both directions for undirected graph
    }

    int src;
    cin >> src; // Source vertex for Dijkstra's algorithm

    dijkstra(V, graph, src); // Call Dijkstra's algorithm

    return 0;
}