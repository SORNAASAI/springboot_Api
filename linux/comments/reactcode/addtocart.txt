import React, { useState } from 'react';
import { Typography, IconButton, Button, List, ListItem, ListItemText } from '@mui/material';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext';

function AddToCart() {
  const { cartItems, addItemToCart, removeItemFromCart } = useCart(); // Get cart items and functions
  const [quantities, setQuantities] = useState(
    cartItems.reduce((acc, item) => ({ ...acc, [item.size]: item.quantity }), {})
  );
  const navigate = useNavigate(); // Initialize useNavigate

  // Function to handle adding quantity
  const handleAddToCart = (item) => {
    addItemToCart(item); // Call addItemToCart to update cart context
    setQuantities({
      ...quantities,
      [item.size]: (quantities[item.size] || item.quantity) + 1,
    });
  };

  // Function to handle removing quantity
  const handleRemoveFromCart = (item) => {
    if (quantities[item.size] > 1) {
      setQuantities({
        ...quantities,
        [item.size]: quantities[item.size] - 1,
      });
    } else {
      removeItemFromCart(item); // Remove item if quantity goes to 0
      setQuantities((prev) => {
        const newQuantities = { ...prev };
        delete newQuantities[item.size];
        return newQuantities;
      });
    }
  };

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
  const totalPrice = cartItems.reduce(
    (acc, item) => acc + item.price * quantities[item.size],
    0
  );
  const totalSavings = cartItems.reduce(
    (acc, item) =>
      acc + (item.originalPrice - item.price) * quantities[item.size],
    0
  );

  return (
    <div style={{ marginTop: '100px', padding: '0 200px' }}>
      {/* Back Button */}
      <IconButton onClick={handleBackClick}>
        <ArrowBackIcon />
      </IconButton>

      <Typography variant="h5" style={{ margin: '20px 0' }}>
        Your Basket
      </Typography>

      {/* Cart Summary */}
      <div
        style={{
          backgroundColor: 'grey',
          width: '100%',
          height: '150px',
          borderRadius: '15px',
          color: 'white',
          padding: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <div>
          <p>
            Subtotal ({cartItems.length} item{cartItems.length > 1 ? 's' : ''}): ₹{totalPrice.toFixed(2)}
          </p>
          <p>
            Savings: ₹{totalSavings.toFixed(2)}
          </p>
        </div>
        <Button variant="contained" color="error" onClick={handleCheckout}>
          Checkout
        </Button>
      </div>
      <br />

      {/* Cart Items */}
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item, index) => (
          <div
            key={index}
            style={{
              backgroundColor: 'white',
              border: '2px solid black',
              width: '100%',
              height: '250px',
              borderRadius: '15px',
              color: 'black',
              position: 'relative',
              marginBottom: '20px',
              display: 'flex',
              padding: '20px',
              alignItems: 'center',
            }}
          >
            {/* Product Image */}
            <img
              src={item.image} // Ensure that image property exists in cartItems
              alt={item.name}
              style={{ width: '100px', height: '100px', marginRight: '20px' }}
            />
            
            {/* Product Details */}
            <div style={{ flexGrow: 1 }}>
              <p><strong>Name:</strong> {item.name}</p>
              <p><strong>Size:</strong> {item.size}</p>
              <p><strong>Price:</strong> ₹{item.price.toFixed(2)}</p>
              <p><strong>Original Price:</strong> ₹{item.originalPrice.toFixed(2)}</p>
            </div>

            {/* Add/Remove Buttons with Quantity Heading */}
            <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                <span style={{ marginBottom: '30px', paddingRight: '200px', textAlign: 'center' }}><strong>Quantity</strong></span>
                {quantities[item.size] === 0 ? (
                  <Button variant="contained" color="error" onClick={() => handleAddToCart(item)}>
                    ADD TO CART
                  </Button>
                ) : (
                  <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '130px', marginRight: '200px' }}>
                    <Button
                      variant="outlined"
                      color="error"
                      onClick={() => handleRemoveFromCart(item)}
                    >
                      <RemoveIcon />
                    </Button>
                    <Button variant="outlined" color="error" style={{ margin: '0 5px' }}>
                      {quantities[item.size]}
                    </Button>
                    <Button
                      variant="outlined"
                      color="error"
                      onClick={() => handleAddToCart(item)}
                    >
                      <AddIcon />
                    </Button>
                  </div>
                )}
              </div>
            </div>

            {/* Subtotal for the specific item */}
            <p style={{ marginLeft: '20px' }}>
              ₹{(item.price * quantities[item.size]).toFixed(2)}
            </p>

            {/* Display Savings for this item */}
            <div style={{ position: 'absolute', right: '20px', top: '20px', textAlign: 'right' }}>
              <p><strong>Subtotal</strong></p>
              <p>
                Saved: ₹{((item.originalPrice - item.price) * quantities[item.size]).toFixed(2)}
              </p>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default AddToCart;






 const { cartItems, addItemToCart, removeItemFromCart,updateItemQuantity } = useCart(); // Get cart items and functions
  const navigate = useNavigate(); // Initialize useNavigate

  // Function to handle adding quantity
  const handleAddToCart = (item) => {
    addItemToCart({ ...item, quantity: 1 }); // Increment item quantity by 1
  };

  // Function to handle removing quantity
  const handleRemoveFromCart = (item) => {
    if (item.quantity > 1) {
      updateItemQuantity(item.name, item.quantity - 1); // Decrease quantity by 1
    } else {
      removeItemFromCart(item.name); // Remove entire item if quantity is 1
    }
  };
  

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
  const totalPrice = cartItems.reduce(
    (acc, item) => acc + (item.price || 0) * (item.quantity || 1), // Ensure price and quantity are valid
    0
  );
  const totalSavings = cartItems.reduce(
    (acc, item) => acc + ((item.originalPrice || 0) - (item.price || 0)) * (item.quantity || 1), // Ensure originalPrice, price, and quantity are valid
    0
  );






crt
import React from 'react';
import { Typography, IconButton, Button } from '@mui/material';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext'; // Import the cart context

function AddToCart() {
  const { cartItems, addItemToCart, removeItemFromCart ,updateItemQuantity} = useCart(); // Get cart items and functions
  const navigate = useNavigate(); // Initialize useNavigate

  // Function to handle adding quantity
  const handleAddToCart = (item) => {
    addItemToCart({ ...item, quantity: 1 }); // Increment item quantity by 1
  };

  // Function to handle removing quantity
  const handleRemoveFromCart = (item) => {
    if (item.quantity > 1) {
      updateItemQuantity(item.name, item.quantity - 1); // Decrease quantity by 1
    } else {
      removeItemFromCart(item.name); // Remove entire item if quantity is 1
    }

  };

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
 // Calculate subtotal and total savings
const totalPrice = cartItems.reduce(
  (acc, item) => acc + (item.discountPrice || 0) * (item.quantity || 1),
  0
);
const totalSavings = cartItems.reduce(
  (acc, item) => acc + ((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1),
  0
);


  return (
    <div style={{ marginTop: '100px', padding: '0 200px' }}>
      {/* Back Button */}
      <IconButton onClick={handleBackClick}>
        <ArrowBackIcon />
      </IconButton>

      <Typography variant="h5" style={{ margin: '20px 0' }}>
        Your Basket
      </Typography>

      {/* Cart Summary */}
      <div
        style={{
          backgroundColor: 'grey',
          width: '100%',
          height: '150px',
          borderRadius: '15px',
          color: 'white',
          padding: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <div>
          <p>
            Subtotal ({cartItems.length} item{cartItems.length > 1 ? 's' : ''}): ₹{totalPrice.toFixed(2)}
          </p>
          <p>
            Savings: ₹{totalSavings.toFixed(2)}
          </p>
        </div>
        <Button variant="contained" color="error" onClick={handleCheckout}>
          Checkout
        </Button>
      </div>
      <br />

      {/* Cart Items */}
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item, index) => (
          <div
            key={index}
            style={{
              backgroundColor: 'white',
              border: '2px solid black',
              width: '100%',
              height: '250px',
              borderRadius: '15px',
              color: 'black',
              position: 'relative',
              marginBottom: '20px',
              display: 'flex',
              padding: '20px',
              alignItems: 'center',
            }}
          >
            {/* Product Image */}
            <img
              src={item.image} // Ensure that image property exists in cartItems
              alt={item.name}
              style={{ width: '100px', height: '100px', marginRight: '20px' }}
            />

            {/* Product Details */}
            <div style={{ flexGrow: 1 }}>
              <p><strong>Name:</strong> {item.name}</p>
              <p><strong>Price:</strong> ₹{(item.discountPrice || 0).toFixed(2)}</p> {/* Ensure price is valid */}
              <p><strong>Original Price:</strong> ₹{(item.price || 0).toFixed(2)}</p> {/* Ensure originalPrice is valid */}
            </div>

            {/* Add/Remove Buttons with Quantity Heading */}
            <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                <span style={{ marginBottom: '30px', paddingRight: '200px', textAlign: 'center' }}><strong>Quantity</strong></span><br/>
                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '130px', marginRight: '200px' }}>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleRemoveFromCart(item)}
                  >
                    <RemoveIcon />
                  </Button>
                  <Button variant="outlined" color="error" style={{ margin: '0 5px' }}>
                    {item.quantity || 1} {/* Ensure quantity is valid */}
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleAddToCart(item)}
                  >
                    <AddIcon />
                  </Button>
                </div>
              </div>
            </div>

            {/* Subtotal for the specific item */}
           

            {/* Display Savings for this item */}
            <div style={{ position: 'absolute', right: '20px', top: '20px', textAlign: 'right' }}>
              <p><strong>Subtotal</strong></p><br/>
              <p style={{ marginLeft: '20px' }}>
              ₹{((item.discountPrice || 0) * (item.quantity || 1)).toFixed(2)} {/* Ensure price and quantity are valid */}
            </p>
              <p>
                Saved:₹{(((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1)).toFixed(2)} {/* Ensure originalPrice, price, and quantity are valid */}
              </p>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default AddToCart;



perfect
// src/components/AddToCart.js
import React from 'react';
import { Typography, IconButton, Button } from '@mui/material';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext'; // Import the cart context

function AddToCart() {
  const { cartItems, addItemToCart, removeItemFromCart, updateItemQuantity } = useCart(); // Get cart items and functions
  const navigate = useNavigate(); // Initialize useNavigate

  // Function to handle adding quantity
  const handleAddToCart = (item) => {
    addItemToCart({ ...item, quantity: 1 }); // Increment item quantity by 1
  };

  // Function to handle removing quantity
  const handleRemoveFromCart = (item) => {
    if (item.quantity > 1) {
      updateItemQuantity(item.id, item.quantity - 1); // Decrease quantity by 1
    } else {
      removeItemFromCart(item.id); // Remove entire item if quantity is 1
    }
  };

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
  const totalPrice = cartItems.reduce(
    (acc, item) => acc + (item.discountPrice || 0) * (item.quantity || 1),
    0
  );
  const totalSavings = cartItems.reduce(
    (acc, item) => acc + ((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1),
    0
  );

  return (
    <div style={{ marginTop: '100px', padding: '0 200px' }}>
      {/* Back Button */}
      <IconButton onClick={handleBackClick}>
        <ArrowBackIcon />
      </IconButton>

      <Typography variant="h5" style={{ margin: '20px 0' }}>
        Your Basket
      </Typography>

      {/* Cart Summary */}
      <div
        style={{
          backgroundColor: 'grey',
          width: '100%',
          height: '150px',
          borderRadius: '15px',
          color: 'white',
          padding: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <div>
          <p>
            Subtotal ({cartItems.length} item{cartItems.length > 1 ? 's' : ''}): ₹{totalPrice.toFixed(2)}
          </p>
          <p>
            Savings: ₹{totalSavings.toFixed(2)}
          </p>
        </div>
        <Button variant="contained" color="error" onClick={handleCheckout}>
          Checkout
        </Button>
      </div>
      <br />

      {/* Cart Items */}
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item) => (
          <div
            key={item.id} // Use item.id instead of index for better performance and uniqueness
            style={{
              backgroundColor: 'white',
              border: '2px solid black',
              width: '100%',
              height: '250px',
              borderRadius: '15px',
              color: 'black',
              position: 'relative',
              marginBottom: '20px',
              display: 'flex',
              padding: '20px',
              alignItems: 'center',
            }}
          >
            {/* Product Image */}
            <img
              src={item.image} // Ensure that image property exists in cartItems
              alt={item.name}
              style={{ width: '100px', height: '100px', marginRight: '20px' }}
            />

            {/* Product Details */}
            <div style={{ flexGrow: 1 }}>
              <p><strong>Name:</strong> {item.name}</p>
              <p><strong>Price:</strong> ₹{(item.discountPrice || 0).toFixed(2)}</p> {/* Ensure price is valid */}
              <p><strong>Original Price:</strong> ₹{(item.price || 0).toFixed(2)}</p> {/* Ensure originalPrice is valid */}
            </div>

            {/* Add/Remove Buttons with Quantity Heading */}
            <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                <span style={{ marginBottom: '30px', paddingRight: '200px', textAlign: 'center' }}><strong>Quantity</strong></span><br/>
                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '130px', marginRight: '200px' }}>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleRemoveFromCart(item)}
                  >
                    <RemoveIcon />
                  </Button>
                  <Button variant="outlined" color="error" style={{ margin: '0 5px' }} >
                    {item.quantity || 1} {/* Ensure quantity is valid */}
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleAddToCart(item)}
                  >
                    <AddIcon />
                  </Button>
                </div>
              </div>
            </div>

            {/* Display Savings for this item */}
            <div style={{ position: 'absolute', right: '20px', top: '20px', textAlign: 'right' }}>
              <p><strong>Subtotal</strong></p><br/>
              <p style={{ marginLeft: '20px' }}>
                ₹{((item.discountPrice || 0) * (item.quantity || 1)).toFixed(2)} {/* Ensure price and quantity are valid */}
              </p>
              <p>
                Saved: ₹{(((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1)).toFixed(2)} {/* Ensure originalPrice, price, and quantity are valid */}
              </p>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default AddToCart;




import React from 'react';
import { Typography, IconButton, Button } from '@mui/material';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext'; // Import the cart context

function AddToCart() {
  const { cartItems, addItemToCart, removeItemFromCart, updateItemQuantity } = useCart(); // Get cart items and functions
  const navigate = useNavigate(); // Initialize useNavigate

  // Function to handle adding quantity for a specific product
  const handleAddToCart = (item) => {
    const existingItem = cartItems.find((cartItem) => cartItem.id === item.id);
    if (existingItem) {
      // Increment quantity for the existing item
      updateItemQuantity(item.id, existingItem.quantity + 1);
    } else {
      // Add a new item with quantity 1
      addItemToCart({ ...item, quantity: 1 });
    }
  };

  // Function to handle removing quantity for a specific product
  const handleRemoveFromCart = (item) => {
    const existingItem = cartItems.find((cartItem) => cartItem.id === item.id);
    if (existingItem && existingItem.quantity > 1) {
      updateItemQuantity(item.id, existingItem.quantity - 1); // Decrease quantity by 1
    } else {
      removeItemFromCart(item.id); // Remove entire item if quantity is 1
    }
  };

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
  const totalPrice = cartItems.reduce(
    (acc, item) => acc + (item.discountPrice || 0) * (item.quantity || 1),
    0
  );
  const totalSavings = cartItems.reduce(
    (acc, item) => acc + ((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1),
    0
  );

  return (
    <div style={{ marginTop: '100px', padding: '0 200px' }}>
      {/* Back Button */}
      <IconButton onClick={handleBackClick}>
        <ArrowBackIcon />
      </IconButton>

      <Typography variant="h5" style={{ margin: '20px 0' }}>
        Your Basket
      </Typography>

      {/* Cart Summary */}
      <div
        style={{
          backgroundColor: 'grey',
          width: '100%',
          height: '150px',
          borderRadius: '15px',
          color: 'white',
          padding: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <div>
          <p>
            Subtotal ({cartItems.length} item{cartItems.length > 1 ? 's' : ''}): ₹{totalPrice.toFixed(2)}
          </p>
          <p>
            Savings: ₹{totalSavings.toFixed(2)}
          </p>
        </div>
        <Button variant="contained" color="error" onClick={handleCheckout}>
          Checkout
        </Button>
      </div>
      <br />

      {/* Cart Items */}
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item) => (
          <div
            key={item.id} // Use item.id instead of index for better performance and uniqueness
            style={{
              backgroundColor: 'white',
              border: '2px solid black',
              width: '100%',
              height: '250px',
              borderRadius: '15px',
              color: 'black',
              position: 'relative',
              marginBottom: '20px',
              display: 'flex',
              padding: '20px',
              alignItems: 'center',
            }}
          >
            {/* Product Image */}
            <img
              src={item.image} // Ensure that image property exists in cartItems
              alt={item.name}
              style={{ width: '100px', height: '100px', marginRight: '20px' }}
            />

            {/* Product Details */}
            <div style={{ flexGrow: 1 }}>
              <p><strong>Name:</strong> {item.name}</p>
              <p><strong>Price:</strong> ₹{(item.discountPrice || 0).toFixed(2)}</p> {/* Ensure price is valid */}
              <p><strong>Original Price:</strong> ₹{(item.price || 0).toFixed(2)}</p> {/* Ensure originalPrice is valid */}
            </div>

            {/* Add/Remove Buttons with Quantity Heading */}
            <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                <span style={{ marginBottom: '30px', paddingRight: '200px', textAlign: 'center' }}><strong>Quantity</strong></span><br/>
                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '130px', marginRight: '200px' }}>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleRemoveFromCart(item)}
                  >
                    <RemoveIcon />
                  </Button>
                  <Button variant="outlined" color="error" style={{ margin: '0 5px' }} >
                    {item.quantity || 1} {/* Ensure quantity is valid */}
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleAddToCart(item)}
                  >
                    <AddIcon />
                  </Button>
                </div>
              </div>
            </div>

            {/* Display Savings for this item */}
            <div style={{ position: 'absolute', right: '20px', top: '20px', textAlign: 'right' }}>
              <p><strong>Subtotal</strong></p><br/>
              <p style={{ marginLeft: '20px' }}>
                ₹{((item.discountPrice || 0) * (item.quantity || 1)).toFixed(2)} {/* Ensure price and quantity are valid */}
              </p>
              <p>
                Saved: ₹{(((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1)).toFixed(2)} {/* Ensure originalPrice, price, and quantity are valid */}
              </p>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default AddToCart;








// src/components/AddToCart.js

import React from 'react';
import { Typography, IconButton, Button } from '@mui/material';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext'; // Import the cart context
import { v4 as uuidv4 } from 'uuid'; // Import uuid for generating unique IDs

function AddTocart() {
  const { cartItems, addItemToCart, removeItemFromCart, updateItemQuantity } = useCart(); // Get cart items and functions
  const navigate = useNavigate(); // Initialize useNavigate

  // Function to handle adding a new entry to the cart for a specific product
  const handleAddToCart = (item) => {
    const existingItem = cartItems.find(cartItem => cartItem.id === item.id); // Check if the item already exists
    if (existingItem) {
      // If item exists, update the quantity
      updateItemQuantity(existingItem.id, existingItem.quantity + 1); // Increase quantity by 1
    } else {
      // Generate a unique ID for the new cart item
      const uniqueItem = { ...item, id: uuidv4(), quantity: 1 };
      addItemToCart(uniqueItem);
    }
  };

  // Function to handle removing quantity for a specific product
  const handleRemoveFromCart = (item) => {
    const existingItem = cartItems.find(cartItem => cartItem.id === item.id);
    if (existingItem && existingItem.quantity > 1) {
      updateItemQuantity(item.id, existingItem.quantity - 1); // Decrease quantity by 1
    } else {
      removeItemFromCart(item.id); // Remove entire item if quantity is 1
    }
  };

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
  const totalPrice = cartItems.reduce(
    (acc, item) => acc + (item.discountPrice || 0) * (item.quantity || 1),
    0
  );
  const totalSavings = cartItems.reduce(
    (acc, item) => acc + ((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1),
    0
  );

  return (
    <div style={{ marginTop: '100px', padding: '0 200px' }}>
      <IconButton onClick={handleBackClick}>
        <ArrowBackIcon />
      </IconButton>

      <Typography variant="h5" style={{ margin: '20px 0' }}>
        Your Basket
      </Typography>

      <div
        style={{
          backgroundColor: 'grey',
          width: '100%',
          height: '150px',
          borderRadius: '15px',
          color: 'white',
          padding: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <div>
          <p>
            Subtotal ({cartItems.length} item{cartItems.length > 1 ? 's' : ''}): ₹{totalPrice.toFixed(2)}
          </p>
          <p>
            Savings: ₹{totalSavings.toFixed(2)}
          </p>
        </div>
        <Button variant="contained" color="error" onClick={handleCheckout}>
          Checkout
        </Button>
      </div>
      <br />

      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item) => (
          <div
            key={item.id} // Use the unique ID for each item
            style={{
              backgroundColor: 'white',
              border: '2px solid black',
              width: '100%',
              height: '250px',
              borderRadius: '15px',
              color: 'black',
              position: 'relative',
              marginBottom: '20px',
              display: 'flex',
              padding: '20px',
              alignItems: 'center',
            }}
          >
            <img
              src={item.image} // Ensure that image property exists in cartItems
              alt={item.name}
              style={{ width: '100px', height: '100px', marginRight: '20px' }}
            />

            <div style={{ flexGrow: 1 }}>
              <p><strong>Name:</strong> {item.name}</p>
              <p><strong>Price:</strong> ₹{(item.discountPrice || 0).toFixed(2)}</p> 
              <p><strong>Original Price:</strong> ₹{(item.price || 0).toFixed(2)}</p> 
            </div>

            <div style={{ display: 'flex', alignItems: 'center', flexGrow: 1, justifyContent: 'center' }}>
  <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
    <span style={{ marginBottom: '10px', textAlign: 'center' }}><strong>Quantity</strong></span>
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <Button
        variant="outlined"
        color="error"
        onClick={() => handleRemoveFromCart(item)}
      >
        <RemoveIcon />
      </Button>
      <Button variant="outlined" color="error">
        {item.quantity || 1}
        </Button>
      <Button
        variant="outlined"
        color="error"
        onClick={() => handleAddToCart(item)}
      >
        <AddIcon />
      </Button>
    </div>
  </div>
</div>


            <div style={{ position: 'absolute', right: '20px', top: '20px', textAlign: 'right' }}>
              <p><strong>Subtotal</strong></p>
              <p style={{ marginLeft: '20px' }}>
                ₹{((item.discountPrice || 0) * (item.quantity || 1)).toFixed(2)} 
              </p>
              <p>
                Saved: ₹{(((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1)).toFixed(2)} 
              </p>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default AddTocart;




crt// src/components/AddToCart.js

import React from 'react';
import { Typography, IconButton, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext'; // Import the cart context
import { useAuth } from './AuthContext'; // Import the authentication context
import { v4 as uuidv4 } from 'uuid'; // Import uuid for generating unique IDs

function Addtocart() {
  const { isLoggedIn } = useAuth();
  const { cartItems, addItemToCart, removeItemFromCart, updateItemQuantity } = useCart(); // Get cart items and functions
  const navigate = useNavigate(); // Initialize useNavigate

  const handleLoginRedirect = () => {
    navigate('/login'); // Redirect to login page
  };

  if (!isLoggedIn) {
    return (
      <Dialog
        open={!isLoggedIn}
        aria-labelledby="login-dialog-title"
        aria-describedby="login-dialog-description"
      >
        <DialogTitle id="login-dialog-title">Login Required</DialogTitle>
        <DialogContent>
          <DialogContentText id="login-dialog-description">
            Please log in to view your cart.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleLoginRedirect} color="primary">
            Go to Login
          </Button>
        </DialogActions>
      </Dialog>
    );
  }

  // Function to handle adding a new entry to the cart for a specific product
  const handleAddToCart = (item) => {
    const existingItem = cartItems.find(cartItem => cartItem.id === item.id); // Check if the item already exists
    if (existingItem) {
      // If item exists, update the quantity
      updateItemQuantity(existingItem.id, existingItem.quantity + 1); // Increase quantity by 1
    } else {
      // Generate a unique ID for the new cart item
      const uniqueItem = { ...item, id: uuidv4(), quantity: 1 };
      addItemToCart(uniqueItem);
    }
  };

  // Function to handle removing quantity for a specific product
  const handleRemoveFromCart = (item) => {
    const existingItem = cartItems.find(cartItem => cartItem.id === item.id);
    if (existingItem && existingItem.quantity > 1) {
      updateItemQuantity(item.id, existingItem.quantity - 1); // Decrease quantity by 1
    } else {
      removeItemFromCart(item.id); // Remove entire item if quantity is 1
    }
  };

  // Function to handle navigating back
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Function to handle navigating to the PaymentPage
  const handleCheckout = () => {
    navigate('/payment'); // Change '/payment' to the actual route for PaymentPage
  };

  // Calculate subtotal and total savings
  const totalPrice = cartItems.reduce(
    (acc, item) => acc + (item.discountPrice || 0) * (item.quantity || 1),
    0
  );
  const totalSavings = cartItems.reduce(
    (acc, item) => acc + ((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1),
    0
  );

  return (
    <div style={{ marginTop: '100px', padding: '0 200px' }}>
      <IconButton onClick={handleBackClick}>
        <ArrowBackIcon />
      </IconButton>

      <Typography variant="h5" style={{ margin: '20px 0' }}>
        Your Basket
      </Typography>

      <div
        style={{
          backgroundColor: 'grey',
          width: '100%',
          height: '150px',
          borderRadius: '15px',
          color: 'white',
          padding: '20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <div>
          <p>
            Subtotal ({cartItems.length} item{cartItems.length > 1 ? 's' : ''}): ₹{totalPrice.toFixed(2)}
          </p>
          <p>
            Savings: ₹{totalSavings.toFixed(2)}
          </p>
        </div>
        <Button variant="contained" color="error" onClick={handleCheckout}>
          Checkout
        </Button>
      </div>
      <br />

      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        cartItems.map((item) => (
          <div
            key={item.id}
            style={{
              backgroundColor: 'white',
              border: '2px solid black',
              width: '100%',
              height: '250px',
              borderRadius: '15px',
              color: 'black',
              position: 'relative',
              marginBottom: '20px',
              display: 'flex',
              padding: '20px',
              alignItems: 'center',
            }}
          >
            <img
              src={item.image}
              alt={item.name}
              style={{ width: '100px', height: '100px', marginRight: '20px' }}
            />
            <div style={{ flexGrow: 1 }}>
              <p><strong>Name:</strong> {item.name}</p>
              <p><strong>Price:</strong> ₹{(item.discountPrice || 0).toFixed(2)}</p>
              <p><strong>Original Price:</strong> ₹{(item.price || 0).toFixed(2)}</p>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', flexGrow: 1, justifyContent: 'center' }}>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                <span style={{ marginBottom: '10px', textAlign: 'center' }}><strong>Quantity</strong></span>
                <div style={{ display: 'flex', alignItems: 'center' }}>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleRemoveFromCart(item)}
                  >
                    <RemoveIcon />
                  </Button>
                  <Button variant="outlined" color="error">
                    {item.quantity || 1}
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    onClick={() => handleAddToCart(item)}
                  >
                    <AddIcon />
                  </Button>
                </div>
              </div>
            </div>
            <div style={{ position: 'absolute', right: '20px', top: '20px', textAlign: 'right' }}>
              <p><strong>Subtotal</strong></p>
              <p style={{ marginLeft: '20px' }}>
                ₹{((item.discountPrice || 0) * (item.quantity || 1)).toFixed(2)}
              </p>
              <p>
                Saved: ₹{(((item.price || 0) - (item.discountPrice || 0)) * (item.quantity || 1)).toFixed(2)}
              </p>
            </div>
          </div>
        ))
      )}
    </div>
  );
}

export default Addtocart;



/
