crt
// src/components/Cleaning.js
import React, { useState, useEffect } from 'react';
import { Button, Checkbox, FormControlLabel, FormGroup } from '@mui/material';
import ArrowBack from '@mui/icons-material/ArrowBack';
import RemoveIcon from '@mui/icons-material/Remove';
import AddIcon from '@mui/icons-material/Add';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { useCart } from './CartContext'; // Adjust the path as necessary

function Cleaning() {
  const [selectedCategory, setSelectedCategory] = useState('cleaning-supplies');
  const [ratings, setRatings] = useState([]);
  const [products, setProducts] = useState([]);
  const navigate = useNavigate(); // Navigation hook for redirecting
  const { addItemToCart, updateItemQuantity, removeItemFromCart } = useCart(); // Access CartContext functions

  useEffect(() => {
    // Fetch cleaning products data
    const fetchProducts = async () => {
      try {
        const response = await axios.get('http://localhost:3000/cleaning'); // Replace with your API URL
        setProducts(response.data); // Assuming the API returns an array of products
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };

    fetchProducts();
  }, []); // Empty dependency array to run only once on mount

  // Handle category change
  const handleCategoryChange = (category) => {
    setSelectedCategory(category);
  };

  // Handle rating filter change
  const handleRatingChange = (event) => {
    const { value, checked } = event.target;
    if (checked) {
      setRatings([...ratings, value]);
    } else {
      setRatings(ratings.filter((rating) => rating !== value));
    }
  };

  // Handle back button click
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  // Handle adding product to the cart
  const handleAddToCart = (product) => {
    addItemToCart({
      id: product.id,
      name: product.name,
      price: product.price,
      discountPrice: product.discountPrice,
      image: product.image,
      quantity: 1,
    });
   
  };

  // Increment product quantity in the cart
  const handleIncrement = (product) => {
    updateItemQuantity(product.id, (product.quantity || 0) + 1);
    
  };

  // Decrement product quantity in the cart
  const handleDecrement = (product) => {
    if (product.quantity > 1) {
      updateItemQuantity(product.id, product.quantity - 1);
      
    } else {
      removeItemFromCart(product.id);
      
    }
  };

  // Filter products based on ratings
  const filteredProducts = ratings.length
    ? products.filter((product) => ratings.includes(String(product.rating)))
    : products;

  return (
    <div style={{ display: 'flex', margin: '20px' }}>
      {/* Filter Sidebar */}
      <div style={{ width: '20%', paddingRight: '20px', borderRight: '1px solid lightgray' }}>
        <h3>Shop by Category</h3>
        <ul style={{ listStyle: 'none', paddingLeft: 0 }}>
          <li
            style={{
              padding: '10px',
              cursor: 'pointer',
              backgroundColor: selectedCategory === 'cleaning-supplies' ? 'lightgreen' : 'transparent',
            }}
            onClick={() => handleCategoryChange('cleaning-supplies')}
          >
            Cleaning Supplies
          </li>
          {/* Add more categories here if needed */}
        </ul>

        <h4>Product Rating</h4>
        <FormGroup>
          {[5, 4, 3, 2, 1].map((rating) => (
            <FormControlLabel
              key={rating}
              control={
                <Checkbox
                  value={rating}
                  checked={ratings.includes(String(rating))}
                  onChange={handleRatingChange}
                />
              }
              label={
                <>
                  {Array.from({ length: rating }, (_, i) => (
                    <span key={i}>⭐</span>
                  ))}
                </>
              }
            />
          ))}
        </FormGroup>
      </div>

      {/* Product Grid */}
      <div style={{ width: '80%', paddingLeft: '20px' }}>
        <h3 style={{ display: 'flex', alignItems: 'center' }}>
          <ArrowBack style={{ marginRight: '10px', cursor: 'pointer' }} onClick={handleBackClick} />
          Cleaning Supplies
        </h3>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '30px' }}>
          {filteredProducts.map((product) => {
            const inCart = product.quantity > 0;

            return (
              <div
                key={product.id}
                style={{
                  border: '1px solid lightgray',
                  padding: '20px',
                  borderRadius: '10px',
                  width: '280px',
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                }}
              >
                <img
                  src={product.image}
                  alt={product.name}
                  style={{
                    width: '230px',
                    height: '200px',
                    objectFit: 'cover',
                    borderRadius: '10px',
                  }}
                />
                <h4>{product.name}</h4>
                <p>₹{product.discountPrice}</p>
                <p>
                  <del>₹{product.price}</del>{' '}
                  <span style={{ color: 'green' }}>{product.discount}</span>
                </p>

                {!inCart ? (
                  <Button variant="contained" onClick={() => handleAddToCart(product)}>
                    ADD TO CART
                  </Button>
                ) : (
                  <div style={{ display: 'flex', alignItems: 'center', marginTop: '10px', gap: '5px' }}>
                    <Button variant="outlined" onClick={() => handleDecrement(product)}>
                      <RemoveIcon />
                    </Button>

                    {/* Quantity Display */}
                    <Button variant="outlined" disabled>
                      {product.quantity}
                    </Button>

                    {/* Add Button to increment quantity */}
                    <Button variant="outlined" onClick={() => handleIncrement(product)}>
                      <AddIcon />
                    </Button>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}

export default Cleaning;
