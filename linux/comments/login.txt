import React, { useState } from 'react';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';

function Loginpge() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = (event) => {
    event.preventDefault();

    let isValid = true;

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      // Store user data in local storage
      const userData = {
        name: 'Sai Krisna',
        email: email,
        phone: '+91 9080384783',
      };
      localStorage.setItem('user', JSON.stringify(userData));

      // Handle successful form submission
      alert('Login successful!');
    }
  };

  return (
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '50vh',
        padding: 2,
      }}
    >
      {/* Left side image */}
      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid" // Replace with your image URL
        alt="Login Illustration"
        sx={{
          width: '50%',
          height: 'auto',
          maxWidth: 300,
          marginRight: 4,
        }}
      />

      {/* Right side form */}
      <Box component="section">
        <div style={{ textAlign: 'center' }}>
          <Typography variant="h4" style={{ color: 'black', paddingBottom: '30px' }}>
            Login
          </Typography>
          <TextField
            id="email"
            name="email"
            type="email"
            label="Email Address"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            style={{ width: '500px' }}
            error={!!emailError}
            helperText={emailError}
            autoComplete="off"
          />
          <br /><br />
          <TextField
            id="password"
            name="password"
            type="password"
            label="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            style={{ width: '500px' }}
            error={!!passwordError}
            helperText={passwordError}
          />
          <br /><br />
          <Button variant="contained" style={{ width: '500px' }} onClick={handleSubmit}>
            Sign in
          </Button>
        </div>
      </Box>
    </Box>
  );
}

export default Loginpge;



import React, { useState } from 'react';
import axios from 'axios';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';

function Signup() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    phoneNumber: '',
    location: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [errors, setErrors] = useState({});
  const [submittedData, setSubmittedData] = useState(null);

  const handleChange = (e) => {
    const { id, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [id]: value }));
    setErrors((prev) => ({
      ...prev,
      [id]: '', // Clear the error for the current field
    }));

    if (id === 'phoneNumber') {
      const digitsOnly = value.replace(/\D/g, '');
      setFormData((prevData) => ({ ...prevData, phoneNumber: digitsOnly }));

      if (digitsOnly.length !== 10 && digitsOnly.length > 0) {
        setErrors((prev) => ({
          ...prev,
          phoneNumber: 'Phone number must be exactly 10 digits long.',
        }));
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const newErrors = {
      firstName: formData.firstName ? '' : 'First Name is required',
      lastName: formData.lastName ? '' : 'Last Name is required',
      phoneNumber: formData.phoneNumber ? '' : 'Phone Number is required',
      location: formData.location ? '' : 'Location is required',
      email: formData.email ? '' : 'Email is required',
      password: formData.password ? '' : 'Password is required',
      confirmPassword: formData.confirmPassword ? '' : 'Confirm Password is required',
    };

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Enter a valid email address';
    }

    if (formData.password && formData.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters long';
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    if (formData.phoneNumber && /[^0-9]/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Phone number can only contain digits.';
    }

    setErrors(newErrors);

    if (Object.values(newErrors).some((error) => error)) {
      return;
    }

    try {
      const response = await axios.post('http://localhost:3000/person', {
        firstName: formData.firstName,
        lastName: formData.lastName,
        phoneNumber: formData.phoneNumber,
        location: formData.location,
        email: formData.email,
      });

      alert('Sign up is successful!');
      setSubmittedData(response.data);

      setFormData({
        firstName: '',
        lastName: '',
        phoneNumber: '',
        location: '',
        email: '',
        password: '',
        confirmPassword: '',
      });
      setErrors({});
    } catch (error) {
      console.error('Error saving user data:', error);
      alert('Failed to sign up. Please try again later.');
    }
  };

  return (
    <div>
      <Box component="section">
        <div style={{ textAlign: 'center' }}>
          <Typography variant="h4" component="h1" style={styles.typo}>
            Signup
          </Typography>
          <TextField
            id="firstName"
            label="First Name"
            style={styles.text}
            value={formData.firstName}
            onChange={handleChange}
            error={!!errors.firstName}
            helperText={errors.firstName}
            autoComplete="off"
          />
          <TextField
            id="lastName"
            label="Last Name"
            style={styles.text}
            value={formData.lastName}
            onChange={handleChange}
            error={!!errors.lastName}
            helperText={errors.lastName}
            autoComplete="off"
          />
          <br /><br />
          <TextField
            id="email"
            label="Email"
            type="email"
            style={styles.textField}
            value={formData.email}
            onChange={handleChange}
            error={!!errors.email}
            helperText={errors.email}
            autoComplete="off"
          />
          <br /><br />
          <TextField
            id="password"
            label="Password"
            type="password"
            style={styles.text}
            value={formData.password}
            onChange={handleChange}
            error={!!errors.password}
            helperText={errors.password}
          />
          <TextField
            id="confirmPassword"
            label="Confirm Password"
            type="password"
            style={styles.text}
            value={formData.confirmPassword}
            onChange={handleChange}
            error={!!errors.confirmPassword}
            helperText={errors.confirmPassword}
          />
          <br /><br />
          <TextField
            id="phoneNumber"
            label="Phone Number"
            style={styles.textField}
            value={formData.phoneNumber}
            onChange={handleChange}
            error={!!errors.phoneNumber}
            helperText={errors.phoneNumber}
          />
          <br /><br />
          <TextField
            id="location"
            label="Location"
            style={styles.textField}
            value={formData.location}
            onChange={handleChange}
            error={!!errors.location}
            helperText={errors.location}
          />
          <br /><br />
          <Button type="submit" variant="contained" onClick={handleSubmit}>
            Sign Up
          </Button>

          {submittedData && (
            <div style={styles.submittedData}>
              <Typography variant="h6">Submitted Information:</Typography>
              <Typography>First Name: {submittedData.firstName}</Typography>
              <Typography>Last Name: {submittedData.lastName}</Typography>
              <Typography>Phone Number: {submittedData.phoneNumber}</Typography>
              <Typography>Location: {submittedData.location}</Typography>
              <Typography>Email: {submittedData.email}</Typography>
            </div>
          )}
        </div>
      </Box>
    </div>
  );
}

const styles = {
  text: {
    padding: '10px',
    width: '200px',
  },
  textField: {
    width: '420px',
  },
  typo: {
    color: 'black',
    paddingBottom: '30px',
  },
  submittedData: {
    marginTop: '20px',
    textAlign: 'left',
    color: 'green',
  },
};

export default Signup;
import React, { useState } from 'react';
import axios from 'axios';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';

function Loginpge() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = async (event) => {
    event.preventDefault();

    let isValid = true;

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      try {
        // Send a POST request to the JSON server to add the user data
        const response = await axios.post('http://localhost:3000/login', {
          email: email,
          password: password,
        });

        // If the request is successful, store the user data in local storage
        const userData = {
          name: 'Sai Krisna',
          email: email,
          phone: '+91 9080384783',
        };
        localStorage.setItem('user', JSON.stringify(userData));

        // Handle successful form submission
        alert('Login successful!');
        console.log('User added:', response.data);

        // Clear the form
        setEmail('');
        setPassword('');
      } catch (error) {
        console.error('Error saving user data:', error);
        alert('Failed to log in. Please try again later.');
      }
    }
  };

  return (
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '50vh',
        padding: 2,
      }}
    >
      {/* Left side image */}
      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid" // Replace with your image URL
        alt="Login Illustration"
        sx={{
          width: '50%',
          height: 'auto',
          maxWidth: 300,
          marginRight: 4,
        }}
      />

      {/* Right side form */}
      <Box component="section">
        <div style={{ textAlign: 'center' }}>
          <Typography variant="h4" style={{ color: 'black', paddingBottom: '30px' }}>
            Login
          </Typography>
          <TextField
            id="email"
            name="email"
            type="email"
            label="Email Address"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            style={{ width: '500px' }}
            error={!!emailError}
            helperText={emailError}
            autoComplete="off"
          />
          <br /><br />
          <TextField
            id="password"
            name="password"
            type="password"
            label="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            style={{ width: '500px' }}
            error={!!passwordError}
            helperText={passwordError}
          />
          <br /><br />
          <Button variant="contained" style={{ width: '500px' }} onClick={handleSubmit}>
            Sign in
          </Button>
        </div>
      </Box>
    </Box>
  );
}

export default Loginpge;


import React, { useState } from 'react';
import axios from 'axios';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';

function Loginpge() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [loginError, setLoginError] = useState('');

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = async (event) => {
    event.preventDefault();

    let isValid = true;
    setLoginError(''); // Clear previous login error message

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      try {
        const response = await axios.get('http://localhost:3000/person');
        const users = response.data;

        const matchingUser = users.find(
          (user) => user.email === email && user.password === password
        );

        if (matchingUser) {
          const userData = {
            name: matchingUser.firstName + ' ' + matchingUser.lastName,
            email: matchingUser.email,
            phone: matchingUser.phoneNumber,
            location: matchingUser.location,
          };
          localStorage.setItem('user', JSON.stringify(userData));

          alert('Login successful!');
          console.log('User added:', userData);

          setEmail('');
          setPassword('');
        } else {
          setLoginError('Invalid email or password. Please try again.');
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        setLoginError('Failed to connect to the server. Please try again later.');
      }
    }
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '80vh',
        padding: 2,
      }}
    >
      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid"
        alt="Login Illustration"
        sx={{
          width: '45%',
          height: 'auto',
          maxWidth: 350,
          marginRight: 4,
        }}
      />

      <Box component="section" sx={{ textAlign: 'center', width: '50%' }}>
        <Typography variant="h4" component="h1" style={styles.typo}>
          Login
        </Typography>
        <TextField
          id="email"
          label="Email"
          style={styles.textField}
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          error={!!emailError}
          helperText={emailError}
          autoComplete="off"
        />
        <br /><br />
        <TextField
          id="password"
          label="Password"
          type="password"
          style={styles.textField}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          error={!!passwordError}
          helperText={passwordError}
        />
        <br /><br />
        {loginError && (
          <Typography color="error" style={{ marginBottom: '20px' }}>
            {loginError}
          </Typography>
        )}
        <Button type="submit" variant="contained" onClick={handleSubmit} style={styles.button}>
          Login
        </Button>
      </Box>
    </Box>
  );
}

const styles = {
  textField: {
    width: '100%',
    maxWidth: 420,
  },
  typo: {
    color: 'black',
    paddingBottom: '30px',
  },
  button: {
    width: '100%',
    maxWidth: 420,
  
  },
};

export default Loginpge;



ctt// src/components/LoginPage.js

import React, { useState } from 'react';
import axios from 'axios';
import { useAuth } from './AuthContext';
import { Button, TextField, Box, Typography, IconButton } from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack'; // Import the back icon
import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation

function LoginPage() {
  const { login, logout, isLoggedIn } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [loginError, setLoginError] = useState('');
  const navigate = useNavigate(); // Initialize useNavigate

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = async (event) => {
    event.preventDefault();

    let isValid = true;
    setLoginError(''); // Clear previous login error message

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      try {
        const response = await axios.get('http://localhost:3000/person');
        const users = response.data;

        const matchingUser = users.find(
          (user) => user.email === email && user.password === password
        );

        if (matchingUser) {
          const userData = {
            name: matchingUser.firstName + ' ' + matchingUser.lastName,
            email: matchingUser.email,
            phone: matchingUser.phoneNumber,
            location: matchingUser.location,
          };
          localStorage.setItem('user', JSON.stringify(userData));

          login(); // Set login state using AuthContext

          alert('Login successful!');
          setEmail('');
          setPassword('');
        } else {
          setLoginError('Invalid email or password. Please try again.');
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        setLoginError('Failed to connect to the server. Please try again later.');
      }
    }
  };

  // Function to handle back navigation
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '80vh',
        padding: 2,
      }}
    >
      {/* Back Button */}
      <IconButton onClick={handleBackClick} style={{ position: 'absolute', left: 20, top: 20 }}>
        <ArrowBackIcon />
      </IconButton>

      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid"
        alt="Login Illustration"
        sx={{
          width: '45%',
          height: 'auto',
          maxWidth: 350,
          marginRight: 4,
        }}
      />

      <Box component="section" sx={{ textAlign: 'center', width: '50%' }}>
        <Typography variant="h4" component="h1" style={styles.typo}>
          {isLoggedIn ? 'Welcome Back!' : 'Login'}
        </Typography>

        {isLoggedIn ? (
          <>
            <p>You are already logged in!</p>
            <Button variant="contained" color="secondary" onClick={logout}>
              Log Out
            </Button>
          </>
        ) : (
          <>
            <TextField
              id="email"
              label="Email"
              style={styles.textField}
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              error={!!emailError}
              helperText={emailError}
              autoComplete="off"
            />
            <br /><br />
            <TextField
              id="password"
              label="Password"
              type="password"
              style={styles.textField}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              error={!!passwordError}
              helperText={passwordError}
            />
            <br /><br />
            {loginError && (
              <Typography color="error" style={{ marginBottom: '20px' }}>
                {loginError}
              </Typography>
            )}
            <Button type="submit" variant="contained" onClick={handleSubmit} style={styles.button}>
              Login
            </Button>
          </>
        )}
      </Box>
    </Box>
  );
}

const styles = {
  textField: {
    width: '100%',
    maxWidth: 420,
  },
  typo: {
    color: 'black',
    paddingBottom: '30px',
  },
  button: {
    width: '100%',
    maxWidth: 420,
  },
};

export default LoginPage;


// src/components/LoginPage.js

import React, { useState } from 'react';
import axios from 'axios';
import { useAuth } from './AuthContext';
import { Button, TextField, Box, Typography, IconButton } from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack'; // Import the back icon
import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation

function () {
  const { login, logout, isLoggedIn } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [loginError, setLoginError] = useState('');
  const navigate = useNavigate(); // Initialize useNavigate

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = async (event) => {
    event.preventDefault();

    let isValid = true;
    setLoginError(''); // Clear previous login error message

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      try {
        const response = await axios.get('http://localhost:3000/person');
        const users = response.data;

        const matchingUser = users.find(
          (user) => user.email === email && user.password === password
        );

        if (matchingUser) {
          const userData = {
            name: matchingUser.firstName + ' ' + matchingUser.lastName,
            email: matchingUser.email,
            phone: matchingUser.phoneNumber,
            location: matchingUser.location,
          };
          localStorage.setItem('user', JSON.stringify(userData));

          login(); // Set login state using AuthContext

          alert('Login successful!');
          setEmail('');
          setPassword('');
          navigate('/'); // Redirect to home page after successful login
        } else {
          setLoginError('Invalid email or password. Please try again.');
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        setLoginError('Failed to connect to the server. Please try again later.');
      }
    }
  };

  // Function to handle back navigation
  const handleBackClick = () => {
    navigate(-1); // Go back to the previous page
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '80vh',
        padding: 2,
      }}
    >
      {/* Back Button */}
      <IconButton onClick={handleBackClick} style={{ position: 'absolute', left: 20, top: 20 }}>
        <ArrowBackIcon />
      </IconButton>

      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid"
        alt="Login Illustration"
        sx={{
          width: '45%',
          height: 'auto',
          maxWidth: 350,
          marginRight: 4,
        }}
      />

      <Box component="section" sx={{ textAlign: 'center', width: '50%' }}>
        <Typography variant="h4" component="h1" style={styles.typo}>
          {isLoggedIn ? 'Welcome Back!' : 'Login'}
        </Typography>

        {isLoggedIn ? (
          <>
            <p>You are already logged in!</p>
            <Button variant="contained" color="secondary" onClick={logout}>
              Log Out
            </Button>
          </>
        ) : (
          <>
            <TextField
              id="email"
              label="Email"
              style={styles.textField}
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              error={!!emailError}
              helperText={emailError}
              autoComplete="off"
            />
            <br /><br />
            <TextField
              id="password"
              label="Password"
              type="password"
              style={styles.textField}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              error={!!passwordError}
              helperText={passwordError}
            />
            <br /><br />
            {loginError && (
              <Typography color="error" style={{ marginBottom: '20px' }}>
                {loginError}
              </Typography>
            )}
            <Button type="submit" variant="contained" onClick={handleSubmit} style={styles.button}>
              Login
            </Button>
          </>
        )}
      </Box>
    </Box>
  );
}

const styles = {
  textField: {
    width: '100%',
    maxWidth: 420,
  },
  typo: {
    color: 'black',
    paddingBottom: '30px',
  },
  button: {
    width: '100%',
    maxWidth: 420,
  },
};

export default Loginpge;


cet
// src/components/LoginPage.js

import React, { useState } from 'react';
import axios from 'axios';
import { useAuth } from './AuthContext';
import { Button, TextField, Box, Typography } from '@mui/material';

function LoginPage() {
  const { login, logout, isLoggedIn } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [loginError, setLoginError] = useState('');

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = async (event) => {
    event.preventDefault();

    let isValid = true;
    setLoginError(''); // Clear previous login error message

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      try {
        const response = await axios.get('http://localhost:3000/person');
        const users = response.data;

        const matchingUser = users.find(
          (user) => user.email === email && user.password === password
        );

        if (matchingUser) {
          const userData = {
            name: matchingUser.firstName + ' ' + matchingUser.lastName,
            email: matchingUser.email,
            phone: matchingUser.phoneNumber,
            location: matchingUser.location,
          };
          localStorage.setItem('user', JSON.stringify(userData));

          login(); // Set login state using AuthContext

          alert('Login successful!');
          setEmail('');
          setPassword('');
        } else {
          setLoginError('Invalid email or password. Please try again.');
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        setLoginError('Failed to connect to the server. Please try again later.');
      }
    }
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '80vh',
        padding: 2,
      }}
    >
      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid"
        alt="Login Illustration"
        sx={{
          width: '45%',
          height: 'auto',
          maxWidth: 350,
          marginRight: 4,
        }}
      />

      <Box component="section" sx={{ textAlign: 'center', width: '50%' }}>
        <Typography variant="h4" component="h1" style={styles.typo}>
          {isLoggedIn ? 'Welcome Back!' : 'Login'}
        </Typography>

        {isLoggedIn ? (
          <>
            <p>You are already logged in!</p>
            <Button variant="contained" color="secondary" onClick={logout}>
              Log Out
            </Button>
          </>
        ) : (
          <>
            <TextField
              id="email"
              label="Email"
              style={styles.textField}
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              error={!!emailError}
              helperText={emailError}
              autoComplete="off"
            />
            <br /><br />
            <TextField
              id="password"
              label="Password"
              type="password"
              style={styles.textField}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              error={!!passwordError}
              helperText={passwordError}
            />
            <br /><br />
            {loginError && (
              <Typography color="error" style={{ marginBottom: '20px' }}>
                {loginError}
              </Typography>
            )}
            <Button type="submit" variant="contained" onClick={handleSubmit} style={styles.button}>
              Login
            </Button>
          </>
        )}
      </Box>
    </Box>
  );
}

const styles = {
  textField: {
    width: '100%',
    maxWidth: 420,
  },
  typo: {
    color: 'black',
    paddingBottom: '30px',
  },
  button: {
    width: '100%',
    maxWidth: 420,
  },
};

export default LoginPage;
// src/components/LoginPage.js

import React, { useState } from 'react';
import axios from 'axios';
import { useAuth } from './AuthContext';
import { Button, TextField, Box, Typography, IconButton } from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack'; // Import the back icon
import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation

function Loginpge() {
  const { login, logout, isLoggedIn } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [loginError, setLoginError] = useState('');
  const navigate = useNavigate(); // Initialize useNavigate

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const handleSubmit = async (event) => {
    event.preventDefault();

    let isValid = true;
    setLoginError(''); // Clear previous login error message

    // Validate email
    if (!email) {
      setEmailError('Email Address is required');
      isValid = false;
    } else if (!emailPattern.test(email)) {
      setEmailError('Enter a valid email address');
      isValid = false;
    } else {
      setEmailError('');
    }

    // Validate password
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      isValid = false;
    } else {
      setPasswordError('');
    }

    if (isValid) {
      try {
        const response = await axios.get('http://localhost:3000/person');
        const users = response.data;

        const matchingUser = users.find(
          (user) => user.email === email && user.password === password
        );

        if (matchingUser) {
          const userData = {
            name: matchingUser.firstName + ' ' + matchingUser.lastName,
            email: matchingUser.email,
            phone: matchingUser.phoneNumber,
            location: matchingUser.location,
          };
          localStorage.setItem('user', JSON.stringify(userData));

          login(); // Set login state using AuthContext

          alert('Login successful!');
          setEmail('');
          setPassword('');
          navigate('/');
        } else {
          setLoginError('Invalid email or password. Please try again.');
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        setLoginError('Failed to connect to the server. Please try again later.');
      }
    }
  };

  // Function to handle back navigation
  const handleBackClick = () => {
    navigate('/cart'); // Go back to the previous page
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '80vh',
        padding: 2,
      }}
    >
      {/* Back Button */}
      <IconButton onClick={handleBackClick} style={{ position: 'absolute', left: 20, top: 20 }}>
        <ArrowBackIcon />
      </IconButton>

      <Box
        component="img"
        src="https://img.freepik.com/free-vector/mobile-login-concept-illustration_114360-83.jpg?size=338&ext=jpg&ga=GA1.1.2113030492.1729382400&semt=ais_hybrid"
        alt="Login Illustration"
        sx={{
          width: '45%',
          height: 'auto',
          maxWidth: 350,
          marginRight: 4,
        }}
      />

      <Box component="section" sx={{ textAlign: 'center', width: '50%' }}>
        <Typography variant="h4" component="h1" style={styles.typo}>
          {isLoggedIn ? 'Welcome Back!' : 'Login'}
        </Typography>

        {isLoggedIn ? (
          <>
            <p>You are already logged in!</p>
            <Button variant="contained" color="secondary" onClick={logout}>
              Log Out
            </Button>
          </>
        ) : (
          <>
            <TextField
              id="email"
              label="Email"
              style={styles.textField}
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              error={!!emailError}
              helperText={emailError}
              autoComplete="off"
            />
            <br /><br />
            <TextField
              id="password"
              label="Password"
              type="password"
              style={styles.textField}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              error={!!passwordError}
              helperText={passwordError}
            />
            <br /><br />
            {loginError && (
              <Typography color="error" style={{ marginBottom: '20px' }}>
                {loginError}
              </Typography>
            )}
            <Button type="submit" variant="contained" onClick={handleSubmit} style={styles.button}>
              Login
            </Button>
          </>
        )}
      </Box>
    </Box>
  );
}

const styles = {
  textField: {
    width: '100%',
    maxWidth: 420,
  },
  typo: {
    color: 'black',
    paddingBottom: '30px',
  },
  button: {
    width: '100%',
    maxWidth: 420,
  },
};

export default Loginpge;
last
